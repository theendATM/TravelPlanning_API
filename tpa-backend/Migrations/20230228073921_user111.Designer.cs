// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tpa_backend.Data;

#nullable disable

namespace tpa_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230228073921_user111")]
    partial class user111
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InterestLandmark", b =>
                {
                    b.Property<int>("InterestsId")
                        .HasColumnType("int");

                    b.Property<Guid>("LandmarksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterestsId", "LandmarksId");

                    b.HasIndex("LandmarksId");

                    b.ToTable("InterestLandmark");
                });

            modelBuilder.Entity("InterestTourist", b =>
                {
                    b.Property<int>("InterestsId")
                        .HasColumnType("int");

                    b.Property<Guid>("TouristsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterestsId", "TouristsId");

                    b.HasIndex("TouristsId");

                    b.ToTable("InterestTourist");
                });

            modelBuilder.Entity("MovingTypePlan", b =>
                {
                    b.Property<int>("MovingTypesId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlansId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovingTypesId", "PlansId");

                    b.HasIndex("PlansId");

                    b.ToTable("MovingTypePlan");
                });

            modelBuilder.Entity("tpa_backend.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("tpa_backend.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LandmarkWorkingHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandmarkWorkingHoursId");

                    b.HasIndex("PlanId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("tpa_backend.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("tpa_backend.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("tpa_backend.Models.Landmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitTime")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DifficultyId");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("tpa_backend.Models.MovingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovingTypes");
                });

            modelBuilder.Entity("tpa_backend.Models.PersonalLandmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("ObligitaryVisit")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitTime")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PersonalLandmarks");
                });

            modelBuilder.Entity("tpa_backend.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ComingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("PlanDifficulty")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("tpa_backend.Models.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LandmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ObligitaryVisit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VisitTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("LandmarkId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("tpa_backend.Models.Tourist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tourists");
                });

            modelBuilder.Entity("tpa_backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("tpa_backend.Models.VisitCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LandmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LandmarkId");

                    b.ToTable("VisitCosts");
                });

            modelBuilder.Entity("InterestLandmark", b =>
                {
                    b.HasOne("tpa_backend.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpa_backend.Models.Landmark", null)
                        .WithMany()
                        .HasForeignKey("LandmarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterestTourist", b =>
                {
                    b.HasOne("tpa_backend.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpa_backend.Models.Tourist", null)
                        .WithMany()
                        .HasForeignKey("TouristsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovingTypePlan", b =>
                {
                    b.HasOne("tpa_backend.Models.MovingType", null)
                        .WithMany()
                        .HasForeignKey("MovingTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpa_backend.Models.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tpa_backend.Models.Day", b =>
                {
                    b.HasOne("tpa_backend.Models.Landmark", "LandmarkWorkingHours")
                        .WithMany("WorkingDays")
                        .HasForeignKey("LandmarkWorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("tpa_backend.Models.Plan", null)
                        .WithMany("Days")
                        .HasForeignKey("PlanId");

                    b.Navigation("LandmarkWorkingHours");
                });

            modelBuilder.Entity("tpa_backend.Models.Difficulty", b =>
                {
                    b.HasOne("tpa_backend.Models.Plan", null)
                        .WithMany("Difficulties")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("tpa_backend.Models.Landmark", b =>
                {
                    b.HasOne("tpa_backend.Models.City", "City")
                        .WithMany("Landmarks")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpa_backend.Models.Difficulty", "Difficulty")
                        .WithMany("Landmarks")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("City");

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("tpa_backend.Models.PersonalLandmark", b =>
                {
                    b.HasOne("tpa_backend.Models.Plan", "Plan")
                        .WithMany("PersonalLandmarks")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("tpa_backend.Models.Plan", b =>
                {
                    b.HasOne("tpa_backend.Models.City", "City")
                        .WithMany("Plans")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpa_backend.Models.User", "User")
                        .WithMany("Plans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("tpa_backend.Models.TimeSlot", b =>
                {
                    b.HasOne("tpa_backend.Models.Day", "Day")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpa_backend.Models.Landmark", "Landmark")
                        .WithMany()
                        .HasForeignKey("LandmarkId");

                    b.Navigation("Day");

                    b.Navigation("Landmark");
                });

            modelBuilder.Entity("tpa_backend.Models.Tourist", b =>
                {
                    b.HasOne("tpa_backend.Models.User", "User")
                        .WithMany("Tourists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("tpa_backend.Models.VisitCost", b =>
                {
                    b.HasOne("tpa_backend.Models.Landmark", "Landmark")
                        .WithMany("VisitCosts")
                        .HasForeignKey("LandmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landmark");
                });

            modelBuilder.Entity("tpa_backend.Models.City", b =>
                {
                    b.Navigation("Landmarks");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("tpa_backend.Models.Day", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("tpa_backend.Models.Difficulty", b =>
                {
                    b.Navigation("Landmarks");
                });

            modelBuilder.Entity("tpa_backend.Models.Landmark", b =>
                {
                    b.Navigation("VisitCosts");

                    b.Navigation("WorkingDays");
                });

            modelBuilder.Entity("tpa_backend.Models.Plan", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Difficulties");

                    b.Navigation("PersonalLandmarks");
                });

            modelBuilder.Entity("tpa_backend.Models.User", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("Tourists");
                });
#pragma warning restore 612, 618
        }
    }
}
